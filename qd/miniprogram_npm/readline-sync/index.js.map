{"version":3,"sources":["readline-sync.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/*\n * readlineSync\n * https://github.com/anseki/readline-sync\n *\n * Copyright (c) 2019 anseki\n * Licensed under the MIT license.\n */\n\n\n\nvar\n  IS_WIN = process.platform === 'win32',\n\n  ALGORITHM_CIPHER = 'aes-256-cbc',\n  ALGORITHM_HASH = 'sha256',\n  DEFAULT_ERR_MSG = 'The current environment doesn\\'t support interactive reading from TTY.',\n\n  fs = require('fs'),\n  TTY = process.binding('tty_wrap').TTY,\n  childProc = require('child_process'),\n  pathUtil = require('path'),\n\n  defaultOptions = {\n    /* eslint-disable key-spacing */\n    prompt:             '> ',\n    hideEchoBack:       false,\n    mask:               '*',\n    limit:              [],\n    limitMessage:       'Input another, please.$<( [)limit(])>',\n    defaultInput:       '',\n    trueValue:          [],\n    falseValue:         [],\n    caseSensitive:      false,\n    keepWhitespace:     false,\n    encoding:           'utf8',\n    bufferSize:         1024,\n    print:              void 0,\n    history:            true,\n    cd:                 false,\n    phContent:          void 0,\n    preCheck:           void 0\n    /* eslint-enable key-spacing */\n  },\n\n  fdR = 'none',\n  isRawMode = false,\n  salt = 0,\n  lastInput = '',\n  inputHistory = [],\n  _DBG_useExt = false,\n  _DBG_checkOptions = false,\n  _DBG_checkMethod = false,\n  fdW, ttyR, extHostPath, extHostArgs, tempdir, rawInput;\n\nfunction getHostArgs(options) {\n  // Send any text to crazy Windows shell safely.\n  function encodeArg(arg) {\n    return arg.replace(/[^\\w\\u0080-\\uFFFF]/g, function(chr) {\n      return '#' + chr.charCodeAt(0) + ';';\n    });\n  }\n\n  return extHostArgs.concat((function(conf) {\n    var args = [];\n    Object.keys(conf).forEach(function(optionName) {\n      if (conf[optionName] === 'boolean') {\n        if (options[optionName]) { args.push('--' + optionName); }\n      } else if (conf[optionName] === 'string') {\n        if (options[optionName]) {\n          args.push('--' + optionName, encodeArg(options[optionName]));\n        }\n      }\n    });\n    return args;\n  })({\n    /* eslint-disable key-spacing */\n    display:        'string',\n    displayOnly:    'boolean',\n    keyIn:          'boolean',\n    hideEchoBack:   'boolean',\n    mask:           'string',\n    limit:          'string',\n    caseSensitive:  'boolean'\n    /* eslint-enable key-spacing */\n  }));\n}\n\n// piping via files (for Node.js v0.10-)\nfunction _execFileSync(options, execOptions) {\n\n  function getTempfile(name) {\n    var suffix = '',\n      filepath, fd;\n    tempdir = tempdir || require('os').tmpdir();\n\n    while (true) {\n      filepath = pathUtil.join(tempdir, name + suffix);\n      try {\n        fd = fs.openSync(filepath, 'wx');\n      } catch (e) {\n        if (e.code === 'EEXIST') {\n          suffix++;\n          continue;\n        } else {\n          throw e;\n        }\n      }\n      fs.closeSync(fd);\n      break;\n    }\n    return filepath;\n  }\n\n  var res = {},\n    pathStdout = getTempfile('readline-sync.stdout'),\n    pathStderr = getTempfile('readline-sync.stderr'),\n    pathExit = getTempfile('readline-sync.exit'),\n    pathDone = getTempfile('readline-sync.done'),\n    crypto = require('crypto'),\n    hostArgs, shellPath, shellArgs, exitCode, extMessage, shasum, decipher, password;\n\n  shasum = crypto.createHash(ALGORITHM_HASH);\n  shasum.update('' + process.pid + (salt++) + Math.random());\n  password = shasum.digest('hex');\n  decipher = crypto.createDecipher(ALGORITHM_CIPHER, password);\n\n  hostArgs = getHostArgs(options);\n  if (IS_WIN) {\n    shellPath = process.env.ComSpec || 'cmd.exe';\n    process.env.Q = '\"'; // The quote (\") that isn't escaped.\n    // `()` for ignore space by echo\n    shellArgs = ['/V:ON', '/S', '/C',\n      '(%Q%' + shellPath + '%Q% /V:ON /S /C %Q%' + /* ESLint bug? */ // eslint-disable-line no-path-concat\n        '%Q%' + extHostPath + '%Q%' +\n          hostArgs.map(function(arg) { return ' %Q%' + arg + '%Q%'; }).join('') +\n        ' & (echo !ERRORLEVEL!)>%Q%' + pathExit + '%Q%%Q%) 2>%Q%' + pathStderr + '%Q%' +\n      ' |%Q%' + process.execPath + '%Q% %Q%' + __dirname + '\\\\encrypt.js%Q%' +\n        ' %Q%' + ALGORITHM_CIPHER + '%Q% %Q%' + password + '%Q%' +\n        ' >%Q%' + pathStdout + '%Q%' +\n      ' & (echo 1)>%Q%' + pathDone + '%Q%'];\n  } else {\n    shellPath = '/bin/sh';\n    shellArgs = ['-c',\n      // Use `()`, not `{}` for `-c` (text param)\n      '(\"' + extHostPath + '\"' + /* ESLint bug? */ // eslint-disable-line no-path-concat\n          hostArgs.map(function(arg) { return \" '\" + arg.replace(/'/g, \"'\\\\''\") + \"'\"; }).join('') +\n        '; echo $?>\"' + pathExit + '\") 2>\"' + pathStderr + '\"' +\n      ' |\"' + process.execPath + '\" \"' + __dirname + '/encrypt.js\"' +\n        ' \"' + ALGORITHM_CIPHER + '\" \"' + password + '\"' +\n        ' >\"' + pathStdout + '\"' +\n      '; echo 1 >\"' + pathDone + '\"'];\n  }\n  if (_DBG_checkMethod) { _DBG_checkMethod('_execFileSync', hostArgs); }\n  try {\n    childProc.spawn(shellPath, shellArgs, execOptions);\n  } catch (e) {\n    res.error = new Error(e.message);\n    res.error.method = '_execFileSync - spawn';\n    res.error.program = shellPath;\n    res.error.args = shellArgs;\n  }\n\n  while (fs.readFileSync(pathDone, {encoding: options.encoding}).trim() !== '1') {} // eslint-disable-line no-empty\n  if ((exitCode =\n      fs.readFileSync(pathExit, {encoding: options.encoding}).trim()) === '0') {\n    res.input =\n      decipher.update(fs.readFileSync(pathStdout, {encoding: 'binary'}),\n        'hex', options.encoding) +\n      decipher.final(options.encoding);\n  } else {\n    extMessage = fs.readFileSync(pathStderr, {encoding: options.encoding}).trim();\n    res.error = new Error(DEFAULT_ERR_MSG + (extMessage ? '\\n' + extMessage : ''));\n    res.error.method = '_execFileSync';\n    res.error.program = shellPath;\n    res.error.args = shellArgs;\n    res.error.extMessage = extMessage;\n    res.error.exitCode = +exitCode;\n  }\n\n  fs.unlinkSync(pathStdout);\n  fs.unlinkSync(pathStderr);\n  fs.unlinkSync(pathExit);\n  fs.unlinkSync(pathDone);\n\n  return res;\n}\n\nfunction readlineExt(options) {\n  var res = {},\n    execOptions = {env: process.env, encoding: options.encoding},\n    hostArgs, extMessage;\n\n  if (!extHostPath) {\n    if (IS_WIN) {\n      if (process.env.PSModulePath) { // Windows PowerShell\n        extHostPath = 'powershell.exe';\n        extHostArgs = ['-ExecutionPolicy', 'Bypass',\n          '-File', __dirname + '\\\\read.ps1']; // eslint-disable-line no-path-concat\n      } else { // Windows Script Host\n        extHostPath = 'cscript.exe';\n        extHostArgs = ['//nologo', __dirname + '\\\\read.cs.js']; // eslint-disable-line no-path-concat\n      }\n    } else {\n      extHostPath = '/bin/sh';\n      extHostArgs = [__dirname + '/read.sh']; // eslint-disable-line no-path-concat\n    }\n  }\n  if (IS_WIN && !process.env.PSModulePath) { // Windows Script Host\n    // ScriptPW (Win XP and Server2003) needs TTY stream as STDIN.\n    // In this case, If STDIN isn't TTY, an error is thrown.\n    execOptions.stdio = [process.stdin];\n  }\n\n  if (childProc.execFileSync) {\n    hostArgs = getHostArgs(options);\n    if (_DBG_checkMethod) { _DBG_checkMethod('execFileSync', hostArgs); }\n    try {\n      res.input = childProc.execFileSync(extHostPath, hostArgs, execOptions);\n    } catch (e) { // non-zero exit code\n      extMessage = e.stderr ? (e.stderr + '').trim() : '';\n      res.error = new Error(DEFAULT_ERR_MSG + (extMessage ? '\\n' + extMessage : ''));\n      res.error.method = 'execFileSync';\n      res.error.program = extHostPath;\n      res.error.args = hostArgs;\n      res.error.extMessage = extMessage;\n      res.error.exitCode = e.status;\n      res.error.code = e.code;\n      res.error.signal = e.signal;\n    }\n  } else {\n    res = _execFileSync(options, execOptions);\n  }\n  if (!res.error) {\n    res.input = res.input.replace(/^\\s*'|'\\s*$/g, '');\n    options.display = '';\n  }\n\n  return res;\n}\n\n/*\n  display:            string\n  displayOnly:        boolean\n  keyIn:              boolean\n  hideEchoBack:       boolean\n  mask:               string\n  limit:              string (pattern)\n  caseSensitive:      boolean\n  keepWhitespace:     boolean\n  encoding, bufferSize, print\n*/\nfunction _readlineSync(options) {\n  var input = '',\n    displaySave = options.display,\n    silent = !options.display && options.keyIn && options.hideEchoBack && !options.mask;\n\n  function tryExt() {\n    var res = readlineExt(options);\n    if (res.error) { throw res.error; }\n    return res.input;\n  }\n\n  if (_DBG_checkOptions) { _DBG_checkOptions(options); }\n\n  (function() { // open TTY\n    var fsB, constants, verNum;\n\n    function getFsB() {\n      if (!fsB) {\n        fsB = process.binding('fs'); // For raw device path\n        constants = process.binding('constants');\n        // for v6.3.0+\n        constants = constants && constants.fs && typeof constants.fs.O_RDWR === 'number'\n          ? constants.fs : constants;\n      }\n      return fsB;\n    }\n\n    if (typeof fdR !== 'string') { return; }\n    fdR = null;\n\n    if (IS_WIN) {\n      // iojs-v2.3.2+ input stream can't read first line. (#18)\n      // ** Don't get process.stdin before check! **\n      // Fixed v5.1.0\n      // Fixed v4.2.4\n      // It regressed again in v5.6.0, it is fixed in v6.2.0.\n      verNum = (function(ver) { // getVerNum\n        var nums = ver.replace(/^\\D+/, '').split('.');\n        var verNum = 0;\n        if ((nums[0] = +nums[0])) { verNum += nums[0] * 10000; }\n        if ((nums[1] = +nums[1])) { verNum += nums[1] * 100; }\n        if ((nums[2] = +nums[2])) { verNum += nums[2]; }\n        return verNum;\n      })(process.version);\n      if (!(verNum >= 20302 && verNum < 40204 || verNum >= 50000 && verNum < 50100 || verNum >= 50600 && verNum < 60200) &&\n          process.stdin.isTTY) {\n        process.stdin.pause();\n        fdR = process.stdin.fd;\n        ttyR = process.stdin._handle;\n      } else {\n        try {\n          // The stream by fs.openSync('\\\\\\\\.\\\\CON', 'r') can't switch to raw mode.\n          // 'CONIN$' might fail on XP, 2000, 7 (x86).\n          fdR = getFsB().open('CONIN$', constants.O_RDWR, parseInt('0666', 8));\n          ttyR = new TTY(fdR, true);\n        } catch (e) { /* ignore */ }\n      }\n\n      if (process.stdout.isTTY) {\n        fdW = process.stdout.fd;\n      } else {\n        try {\n          fdW = fs.openSync('\\\\\\\\.\\\\CON', 'w');\n        } catch (e) { /* ignore */ }\n        if (typeof fdW !== 'number') { // Retry\n          try {\n            fdW = getFsB().open('CONOUT$', constants.O_RDWR, parseInt('0666', 8));\n          } catch (e) { /* ignore */ }\n        }\n      }\n\n    } else {\n      if (process.stdin.isTTY) {\n        process.stdin.pause();\n        try {\n          fdR = fs.openSync('/dev/tty', 'r'); // device file, not process.stdin\n          ttyR = process.stdin._handle;\n        } catch (e) { /* ignore */ }\n      } else {\n        // Node.js v0.12 read() fails.\n        try {\n          fdR = fs.openSync('/dev/tty', 'r');\n          ttyR = new TTY(fdR, false);\n        } catch (e) { /* ignore */ }\n      }\n\n      if (process.stdout.isTTY) {\n        fdW = process.stdout.fd;\n      } else {\n        try {\n          fdW = fs.openSync('/dev/tty', 'w');\n        } catch (e) { /* ignore */ }\n      }\n    }\n  })();\n\n  (function() { // try read\n    var isCooked = !options.hideEchoBack && !options.keyIn,\n      atEol, limit, buffer, reqSize, readSize, chunk, line;\n    rawInput = '';\n\n    // Node.js v0.10- returns an error if same mode is set.\n    function setRawMode(mode) {\n      if (mode === isRawMode) { return true; }\n      if (ttyR.setRawMode(mode) !== 0) { return false; }\n      isRawMode = mode;\n      return true;\n    }\n\n    if (_DBG_useExt || !ttyR ||\n        typeof fdW !== 'number' && (options.display || !isCooked)) {\n      input = tryExt();\n      return;\n    }\n\n    if (options.display) {\n      fs.writeSync(fdW, options.display);\n      options.display = '';\n    }\n    if (options.displayOnly) { return; }\n\n    if (!setRawMode(!isCooked)) {\n      input = tryExt();\n      return;\n    }\n\n    reqSize = options.keyIn ? 1 : options.bufferSize;\n    // Check `allocUnsafe` to make sure of the new API.\n    buffer = Buffer.allocUnsafe && Buffer.alloc ? Buffer.alloc(reqSize) : new Buffer(reqSize);\n\n    if (options.keyIn && options.limit) {\n      limit = new RegExp('[^' + options.limit + ']',\n        'g' + (options.caseSensitive ? '' : 'i'));\n    }\n\n    while (true) {\n      readSize = 0;\n      try {\n        readSize = fs.readSync(fdR, buffer, 0, reqSize);\n      } catch (e) {\n        if (e.code !== 'EOF') {\n          setRawMode(false);\n          input += tryExt();\n          return;\n        }\n      }\n      if (readSize > 0) {\n        chunk = buffer.toString(options.encoding, 0, readSize);\n        rawInput += chunk;\n      } else {\n        chunk = '\\n';\n        rawInput += String.fromCharCode(0);\n      }\n\n      if (chunk && typeof (line = (chunk.match(/^(.*?)[\\r\\n]/) || [])[1]) === 'string') {\n        chunk = line;\n        atEol = true;\n      }\n\n      // other ctrl-chars\n      // eslint-disable-next-line no-control-regex\n      if (chunk) { chunk = chunk.replace(/[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]/g, ''); }\n      if (chunk && limit) { chunk = chunk.replace(limit, ''); }\n\n      if (chunk) {\n        if (!isCooked) {\n          if (!options.hideEchoBack) {\n            fs.writeSync(fdW, chunk);\n          } else if (options.mask) {\n            fs.writeSync(fdW, (new Array(chunk.length + 1)).join(options.mask));\n          }\n        }\n        input += chunk;\n      }\n\n      if (!options.keyIn && atEol ||\n        options.keyIn && input.length >= reqSize) { break; }\n    }\n\n    if (!isCooked && !silent) { fs.writeSync(fdW, '\\n'); }\n    setRawMode(false);\n  })();\n\n  if (options.print && !silent) {\n    options.print(\n      displaySave + (\n        options.displayOnly ? '' : (\n          options.hideEchoBack ? (new Array(input.length + 1)).join(options.mask) : input\n        ) + '\\n' // must at least write '\\n'\n      ),\n      options.encoding);\n  }\n\n  return options.displayOnly ? '' :\n    (lastInput = options.keepWhitespace || options.keyIn ? input : input.trim());\n}\n\nfunction flattenArray(array, validator) {\n  var flatArray = [];\n  function _flattenArray(array) {\n    if (array == null) { return; }\n    if (Array.isArray(array)) {\n      array.forEach(_flattenArray);\n    } else if (!validator || validator(array)) {\n      flatArray.push(array);\n    }\n  }\n  _flattenArray(array);\n  return flatArray;\n}\n\nfunction escapePattern(pattern) {\n  return pattern.replace(/[\\x00-\\x7f]/g, // eslint-disable-line no-control-regex\n    function(s) { return '\\\\x' + ('00' + s.charCodeAt().toString(16)).substr(-2); });\n}\n\n// margeOptions(options1, options2 ... )\n// margeOptions(true, options1, options2 ... )\n//    arg1=true : Start from defaultOptions and pick elements of that.\nfunction margeOptions() {\n  var optionsList = Array.prototype.slice.call(arguments),\n    optionNames, fromDefault;\n\n  if (optionsList.length && typeof optionsList[0] === 'boolean') {\n    fromDefault = optionsList.shift();\n    if (fromDefault) {\n      optionNames = Object.keys(defaultOptions);\n      optionsList.unshift(defaultOptions);\n    }\n  }\n\n  return optionsList.reduce(function(options, optionsPart) {\n    if (optionsPart == null) { return options; }\n\n    // ======== DEPRECATED ========\n    if (optionsPart.hasOwnProperty('noEchoBack') &&\n        !optionsPart.hasOwnProperty('hideEchoBack')) {\n      optionsPart.hideEchoBack = optionsPart.noEchoBack;\n      delete optionsPart.noEchoBack;\n    }\n    if (optionsPart.hasOwnProperty('noTrim') &&\n        !optionsPart.hasOwnProperty('keepWhitespace')) {\n      optionsPart.keepWhitespace = optionsPart.noTrim;\n      delete optionsPart.noTrim;\n    }\n    // ======== /DEPRECATED ========\n\n    if (!fromDefault) { optionNames = Object.keys(optionsPart); }\n    optionNames.forEach(function(optionName) {\n      var value;\n      if (!optionsPart.hasOwnProperty(optionName)) { return; }\n      value = optionsPart[optionName];\n      /* eslint-disable no-multi-spaces */\n      switch (optionName) {\n        //                    _readlineSync <- *    * -> defaultOptions\n        // ================ string\n        case 'mask':                        // *    *\n        case 'limitMessage':                //      *\n        case 'defaultInput':                //      *\n        case 'encoding':                    // *    *\n          value = value != null ? value + '' : '';\n          if (value && optionName !== 'limitMessage') { value = value.replace(/[\\r\\n]/g, ''); }\n          options[optionName] = value;\n          break;\n        // ================ number(int)\n        case 'bufferSize':                  // *    *\n          if (!isNaN(value = parseInt(value, 10)) && typeof value === 'number') {\n            options[optionName] = value; // limited updating (number is needed)\n          }\n          break;\n        // ================ boolean\n        case 'displayOnly':                 // *\n        case 'keyIn':                       // *\n        case 'hideEchoBack':                // *    *\n        case 'caseSensitive':               // *    *\n        case 'keepWhitespace':              // *    *\n        case 'history':                     //      *\n        case 'cd':                          //      *\n          options[optionName] = !!value;\n          break;\n        // ================ array\n        case 'limit':                       // *    *     to string for readlineExt\n        case 'trueValue':                   //      *\n        case 'falseValue':                  //      *\n          options[optionName] = flattenArray(value, function(value) {\n            var type = typeof value;\n            return type === 'string' || type === 'number' ||\n              type === 'function' || value instanceof RegExp;\n          }).map(function(value) {\n            return typeof value === 'string' ? value.replace(/[\\r\\n]/g, '') : value;\n          });\n          break;\n        // ================ function\n        case 'print':                       // *    *\n        case 'phContent':                   //      *\n        case 'preCheck':                    //      *\n          options[optionName] = typeof value === 'function' ? value : void 0;\n          break;\n        // ================ other\n        case 'prompt':                      //      *\n        case 'display':                     // *\n          options[optionName] = value != null ? value : '';\n          break;\n        // no default\n      }\n      /* eslint-enable no-multi-spaces */\n    });\n    return options;\n  }, {});\n}\n\nfunction isMatched(res, comps, caseSensitive) {\n  return comps.some(function(comp) {\n    var type = typeof comp;\n    return type === 'string'\n      ? (caseSensitive ? res === comp : res.toLowerCase() === comp.toLowerCase()) :\n      type === 'number' ? parseFloat(res) === comp :\n      type === 'function' ? comp(res) :\n      comp instanceof RegExp ? comp.test(res) : false;\n  });\n}\n\nfunction replaceHomePath(path, expand) {\n  var homePath = pathUtil.normalize(\n    IS_WIN ? (process.env.HOMEDRIVE || '') + (process.env.HOMEPATH || '') :\n    process.env.HOME || '').replace(/[/\\\\]+$/, '');\n  path = pathUtil.normalize(path);\n  return expand ? path.replace(/^~(?=\\/|\\\\|$)/, homePath) :\n    path.replace(new RegExp('^' + escapePattern(homePath) +\n      '(?=\\\\/|\\\\\\\\|$)', IS_WIN ? 'i' : ''), '~');\n}\n\nfunction replacePlaceholder(text, generator) {\n  var PTN_INNER = '(?:\\\\(([\\\\s\\\\S]*?)\\\\))?(\\\\w+|.-.)(?:\\\\(([\\\\s\\\\S]*?)\\\\))?',\n    rePlaceholder = new RegExp('(\\\\$)?(\\\\$<' + PTN_INNER + '>)', 'g'),\n    rePlaceholderCompat = new RegExp('(\\\\$)?(\\\\$\\\\{' + PTN_INNER + '\\\\})', 'g');\n\n  function getPlaceholderText(s, escape, placeholder, pre, param, post) {\n    var text;\n    return escape || typeof (text = generator(param)) !== 'string' ? placeholder :\n      text ? (pre || '') + text + (post || '') : '';\n  }\n\n  return text.replace(rePlaceholder, getPlaceholderText)\n    .replace(rePlaceholderCompat, getPlaceholderText);\n}\n\nfunction array2charlist(array, caseSensitive, collectSymbols) {\n  var group = [],\n    groupClass = -1,\n    charCode = 0,\n    symbols = '',\n    values, suppressed;\n  function addGroup(groups, group) {\n    if (group.length > 3) { // ellipsis\n      groups.push(group[0] + '...' + group[group.length - 1]);\n      suppressed = true;\n    } else if (group.length) {\n      groups = groups.concat(group);\n    }\n    return groups;\n  }\n\n  values = array.reduce(function(chars, value) {\n    return chars.concat((value + '').split(''));\n  }, []).reduce(function(groups, curChar) {\n    var curGroupClass, curCharCode;\n    if (!caseSensitive) { curChar = curChar.toLowerCase(); }\n    curGroupClass = /^\\d$/.test(curChar) ? 1 :\n      /^[A-Z]$/.test(curChar) ? 2 : /^[a-z]$/.test(curChar) ? 3 : 0;\n    if (collectSymbols && curGroupClass === 0) {\n      symbols += curChar;\n    } else {\n      curCharCode = curChar.charCodeAt(0);\n      if (curGroupClass && curGroupClass === groupClass &&\n          curCharCode === charCode + 1) {\n        group.push(curChar);\n      } else {\n        groups = addGroup(groups, group);\n        group = [curChar];\n        groupClass = curGroupClass;\n      }\n      charCode = curCharCode;\n    }\n    return groups;\n  }, []);\n  values = addGroup(values, group); // last group\n  if (symbols) { values.push(symbols); suppressed = true; }\n  return {values: values, suppressed: suppressed};\n}\n\nfunction joinChunks(chunks, suppressed) {\n  return chunks.join(chunks.length > 2 ? ', ' : suppressed ? ' / ' : '/');\n}\n\nfunction getPhContent(param, options) {\n  var resCharlist = {},\n    text, values, arg;\n  if (options.phContent) {\n    text = options.phContent(param, options);\n  }\n  if (typeof text !== 'string') {\n    switch (param) {\n      case 'hideEchoBack':\n      case 'mask':\n      case 'defaultInput':\n      case 'caseSensitive':\n      case 'keepWhitespace':\n      case 'encoding':\n      case 'bufferSize':\n      case 'history':\n      case 'cd':\n        text = !options.hasOwnProperty(param) ? '' :\n          typeof options[param] === 'boolean' ? (options[param] ? 'on' : 'off') :\n          options[param] + '';\n        break;\n      // case 'prompt':\n      // case 'query':\n      // case 'display':\n      //   text = options.hasOwnProperty('displaySrc') ? options.displaySrc + '' : '';\n      //   break;\n      case 'limit':\n      case 'trueValue':\n      case 'falseValue':\n        values = options[options.hasOwnProperty(param + 'Src') ? param + 'Src' : param];\n        if (options.keyIn) { // suppress\n          resCharlist = array2charlist(values, options.caseSensitive);\n          values = resCharlist.values;\n        } else {\n          values = values.filter(function(value) {\n            var type = typeof value;\n            return type === 'string' || type === 'number';\n          });\n        }\n        text = joinChunks(values, resCharlist.suppressed);\n        break;\n      case 'limitCount':\n      case 'limitCountNotZero':\n        text = options[options.hasOwnProperty('limitSrc') ? 'limitSrc' : 'limit'].length;\n        text = text || param !== 'limitCountNotZero' ? text + '' : '';\n        break;\n      case 'lastInput':\n        text = lastInput;\n        break;\n      case 'cwd':\n      case 'CWD':\n      case 'cwdHome':\n        text = process.cwd();\n        if (param === 'CWD') {\n          text = pathUtil.basename(text);\n        } else if (param === 'cwdHome') {\n          text = replaceHomePath(text);\n        }\n        break;\n      case 'date':\n      case 'time':\n      case 'localeDate':\n      case 'localeTime':\n        text = (new Date())['to' +\n          param.replace(/^./, function(str) { return str.toUpperCase(); }) +\n          'String']();\n        break;\n      default: // with arg\n        if (typeof (arg = (param.match(/^history_m(\\d+)$/) || [])[1]) === 'string') {\n          text = inputHistory[inputHistory.length - arg] || '';\n        }\n    }\n  }\n  return text;\n}\n\nfunction getPhCharlist(param) {\n  var matches = /^(.)-(.)$/.exec(param),\n    text = '',\n    from, to, code, step;\n  if (!matches) { return null; }\n  from = matches[1].charCodeAt(0);\n  to = matches[2].charCodeAt(0);\n  step = from < to ? 1 : -1;\n  for (code = from; code !== to + step; code += step) { text += String.fromCharCode(code); }\n  return text;\n}\n\n// cmd \"arg\" \" a r g \" \"\" 'a\"r\"g' \"a\"\"rg\" \"arg\nfunction parseCl(cl) {\n  var reToken = new RegExp(/(\\s*)(?:(\"|')(.*?)(?:\\2|$)|(\\S+))/g),\n    taken = '',\n    args = [],\n    matches, part;\n  cl = cl.trim();\n  while ((matches = reToken.exec(cl))) {\n    part = matches[3] || matches[4] || '';\n    if (matches[1]) {\n      args.push(taken);\n      taken = '';\n    }\n    taken += part;\n  }\n  if (taken) { args.push(taken); }\n  return args;\n}\n\nfunction toBool(res, options) {\n  return (\n    (options.trueValue.length &&\n      isMatched(res, options.trueValue, options.caseSensitive)) ? true :\n    (options.falseValue.length &&\n      isMatched(res, options.falseValue, options.caseSensitive)) ? false : res);\n}\n\nfunction getValidLine(options) {\n  var res, forceNext, limitMessage,\n    matches, histInput, args, resCheck;\n\n  function _getPhContent(param) { return getPhContent(param, options); }\n  function addDisplay(text) { options.display += (/[^\\r\\n]$/.test(options.display) ? '\\n' : '') + text; }\n\n  options.limitSrc = options.limit;\n  options.displaySrc = options.display;\n  options.limit = ''; // for readlineExt\n  options.display = replacePlaceholder(options.display + '', _getPhContent);\n\n  while (true) {\n    res = _readlineSync(options);\n    forceNext = false;\n    limitMessage = '';\n\n    if (options.defaultInput && !res) { res = options.defaultInput; }\n\n    if (options.history) {\n      if ((matches = /^\\s*!(?:!|-1)(:p)?\\s*$/.exec(res))) { // `!!` `!-1` +`:p`\n        histInput = inputHistory[0] || '';\n        if (matches[1]) { // only display\n          forceNext = true;\n        } else { // replace input\n          res = histInput;\n        }\n        // Show it even if it is empty (NL only).\n        addDisplay(histInput + '\\n');\n        if (!forceNext) { // Loop may break\n          options.displayOnly = true;\n          _readlineSync(options);\n          options.displayOnly = false;\n        }\n      } else if (res && res !== inputHistory[inputHistory.length - 1]) {\n        inputHistory = [res];\n      }\n    }\n\n    if (!forceNext && options.cd && res) {\n      args = parseCl(res);\n      switch (args[0].toLowerCase()) {\n        case 'cd':\n          if (args[1]) {\n            try {\n              process.chdir(replaceHomePath(args[1], true));\n            } catch (e) {\n              addDisplay(e + '');\n            }\n          }\n          forceNext = true;\n          break;\n        case 'pwd':\n          addDisplay(process.cwd());\n          forceNext = true;\n          break;\n        // no default\n      }\n    }\n\n    if (!forceNext && options.preCheck) {\n      resCheck = options.preCheck(res, options);\n      res = resCheck.res;\n      if (resCheck.forceNext) { forceNext = true; } // Don't switch to false.\n    }\n\n    if (!forceNext) {\n      if (!options.limitSrc.length ||\n        isMatched(res, options.limitSrc, options.caseSensitive)) { break; }\n      if (options.limitMessage) {\n        limitMessage = replacePlaceholder(options.limitMessage, _getPhContent);\n      }\n    }\n\n    addDisplay((limitMessage ? limitMessage + '\\n' : '') +\n      replacePlaceholder(options.displaySrc + '', _getPhContent));\n  }\n  return toBool(res, options);\n}\n\n// for dev\nexports._DBG_set_useExt = function(val) { _DBG_useExt = val; };\nexports._DBG_set_checkOptions = function(val) { _DBG_checkOptions = val; };\nexports._DBG_set_checkMethod = function(val) { _DBG_checkMethod = val; };\nexports._DBG_clearHistory = function() { lastInput = ''; inputHistory = []; };\n\n// ------------------------------------\n\nexports.setDefaultOptions = function(options) {\n  defaultOptions = margeOptions(true, options);\n  return margeOptions(true); // copy\n};\n\nexports.question = function(query, options) {\n  /* eslint-disable key-spacing */\n  return getValidLine(margeOptions(margeOptions(true, options), {\n    display:            query\n  }));\n  /* eslint-enable key-spacing */\n};\n\nexports.prompt = function(options) {\n  var readOptions = margeOptions(true, options);\n  readOptions.display = readOptions.prompt;\n  return getValidLine(readOptions);\n};\n\nexports.keyIn = function(query, options) {\n  /* eslint-disable key-spacing */\n  var readOptions = margeOptions(margeOptions(true, options), {\n    display:            query,\n    keyIn:              true,\n    keepWhitespace:     true\n  });\n  /* eslint-enable key-spacing */\n\n  // char list\n  readOptions.limitSrc = readOptions.limit.filter(function(value) {\n    var type = typeof value;\n    return type === 'string' || type === 'number';\n  }).map(function(text) {\n    return replacePlaceholder(text + '', getPhCharlist);\n  });\n  // pattern\n  readOptions.limit = escapePattern(readOptions.limitSrc.join(''));\n\n  ['trueValue', 'falseValue'].forEach(function(optionName) {\n    readOptions[optionName] = readOptions[optionName].reduce(function(comps, comp) {\n      var type = typeof comp;\n      if (type === 'string' || type === 'number') {\n        comps = comps.concat((comp + '').split(''));\n      } else { comps.push(comp); }\n      return comps;\n    }, []);\n  });\n\n  readOptions.display = replacePlaceholder(readOptions.display + '',\n    function(param) { return getPhContent(param, readOptions); });\n\n  return toBool(_readlineSync(readOptions), readOptions);\n};\n\n// ------------------------------------\n\nexports.questionEMail = function(query, options) {\n  if (query == null) { query = 'Input e-mail address: '; }\n  /* eslint-disable key-spacing */\n  return exports.question(query, margeOptions({\n    // -------- default\n    hideEchoBack:       false,\n    // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address\n    limit:              /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n    limitMessage:       'Input valid e-mail address, please.',\n    trueValue:          null,\n    falseValue:         null\n  }, options, {\n    // -------- forced\n    keepWhitespace:     false,\n    cd:                 false\n  }));\n  /* eslint-enable key-spacing */\n};\n\nexports.questionNewPassword = function(query, options) {\n  /* eslint-disable key-spacing */\n  var resCharlist, min, max,\n    readOptions = margeOptions({\n      // -------- default\n      hideEchoBack:       true,\n      mask:               '*',\n      limitMessage:       'It can include: $<charlist>\\n' +\n                            'And the length must be: $<length>',\n      trueValue:          null,\n      falseValue:         null,\n      caseSensitive:      true\n    }, options, {\n      // -------- forced\n      history:            false,\n      cd:                 false,\n      // limit (by charlist etc.),\n      phContent: function(param) {\n        return param === 'charlist' ? resCharlist.text :\n          param === 'length' ? min + '...' + max : null;\n      }\n    }),\n    // added:     charlist, min, max, confirmMessage, unmatchMessage\n    charlist, confirmMessage, unmatchMessage,\n    limit, limitMessage, res1, res2;\n  /* eslint-enable key-spacing */\n  options = options || {};\n\n  charlist = replacePlaceholder(\n    options.charlist ? options.charlist + '' : '$<!-~>', getPhCharlist);\n  if (isNaN(min = parseInt(options.min, 10)) || typeof min !== 'number') { min = 12; }\n  if (isNaN(max = parseInt(options.max, 10)) || typeof max !== 'number') { max = 24; }\n  limit = new RegExp('^[' + escapePattern(charlist) +\n    ']{' + min + ',' + max + '}$');\n  resCharlist = array2charlist([charlist], readOptions.caseSensitive, true);\n  resCharlist.text = joinChunks(resCharlist.values, resCharlist.suppressed);\n\n  confirmMessage = options.confirmMessage != null ? options.confirmMessage :\n    'Reinput a same one to confirm it: ';\n  unmatchMessage = options.unmatchMessage != null ? options.unmatchMessage :\n    'It differs from first one.' +\n      ' Hit only the Enter key if you want to retry from first one.';\n\n  if (query == null) { query = 'Input new password: '; }\n\n  limitMessage = readOptions.limitMessage;\n  while (!res2) {\n    readOptions.limit = limit;\n    readOptions.limitMessage = limitMessage;\n    res1 = exports.question(query, readOptions);\n\n    readOptions.limit = [res1, ''];\n    readOptions.limitMessage = unmatchMessage;\n    res2 = exports.question(confirmMessage, readOptions);\n  }\n\n  return res1;\n};\n\nfunction _questionNum(query, options, parser) {\n  var validValue;\n  function getValidValue(value) {\n    validValue = parser(value);\n    return !isNaN(validValue) && typeof validValue === 'number';\n  }\n  /* eslint-disable key-spacing */\n  exports.question(query, margeOptions({\n    // -------- default\n    limitMessage:       'Input valid number, please.'\n  }, options, {\n    // -------- forced\n    limit:              getValidValue,\n    cd:                 false\n    // trueValue, falseValue, caseSensitive, keepWhitespace don't work.\n  }));\n  /* eslint-enable key-spacing */\n  return validValue;\n}\nexports.questionInt = function(query, options) {\n  return _questionNum(query, options, function(value) { return parseInt(value, 10); });\n};\nexports.questionFloat = function(query, options) {\n  return _questionNum(query, options, parseFloat);\n};\n\nexports.questionPath = function(query, options) {\n  /* eslint-disable key-spacing */\n  var error = '',\n    validPath, // before readOptions\n    readOptions = margeOptions({\n      // -------- default\n      hideEchoBack:       false,\n      limitMessage:       '$<error(\\n)>Input valid path, please.' +\n                            '$<( Min:)min>$<( Max:)max>',\n      history:            true,\n      cd:                 true\n    }, options, {\n      // -------- forced\n      keepWhitespace:     false,\n      limit: function(value) {\n        var exists, stat, res;\n        value = replaceHomePath(value, true);\n        error = ''; // for validate\n        // mkdir -p\n        function mkdirParents(dirPath) {\n          dirPath.split(/\\/|\\\\/).reduce(function(parents, dir) {\n            var path = pathUtil.resolve((parents += dir + pathUtil.sep));\n            if (!fs.existsSync(path)) {\n              fs.mkdirSync(path);\n            } else if (!fs.statSync(path).isDirectory()) {\n              throw new Error('Non directory already exists: ' + path);\n            }\n            return parents;\n          }, '');\n        }\n\n        try {\n          exists = fs.existsSync(value);\n          validPath = exists ? fs.realpathSync(value) : pathUtil.resolve(value);\n          // options.exists default: true, not-bool: no-check\n          if (!options.hasOwnProperty('exists') && !exists ||\n              typeof options.exists === 'boolean' && options.exists !== exists) {\n            error = (exists ? 'Already exists' : 'No such file or directory') +\n              ': ' + validPath;\n            return false;\n          }\n          if (!exists && options.create) {\n            if (options.isDirectory) {\n              mkdirParents(validPath);\n            } else {\n              mkdirParents(pathUtil.dirname(validPath));\n              fs.closeSync(fs.openSync(validPath, 'w')); // touch\n            }\n            validPath = fs.realpathSync(validPath);\n          }\n          if (exists && (options.min || options.max ||\n              options.isFile || options.isDirectory)) {\n            stat = fs.statSync(validPath);\n            // type check first (directory has zero size)\n            if (options.isFile && !stat.isFile()) {\n              error = 'Not file: ' + validPath;\n              return false;\n            } else if (options.isDirectory && !stat.isDirectory()) {\n              error = 'Not directory: ' + validPath;\n              return false;\n            } else if (options.min && stat.size < +options.min ||\n                options.max && stat.size > +options.max) {\n              error = 'Size ' + stat.size + ' is out of range: ' + validPath;\n              return false;\n            }\n          }\n          if (typeof options.validate === 'function' &&\n              (res = options.validate(validPath)) !== true) {\n            if (typeof res === 'string') { error = res; }\n            return false;\n          }\n        } catch (e) {\n          error = e + '';\n          return false;\n        }\n        return true;\n      },\n      // trueValue, falseValue, caseSensitive don't work.\n      phContent: function(param) {\n        return param === 'error' ? error :\n          param !== 'min' && param !== 'max' ? null :\n          options.hasOwnProperty(param) ? options[param] + '' : '';\n      }\n    });\n    // added:     exists, create, min, max, isFile, isDirectory, validate\n  /* eslint-enable key-spacing */\n  options = options || {};\n\n  if (query == null) { query = 'Input path (you can \"cd\" and \"pwd\"): '; }\n\n  exports.question(query, readOptions);\n  return validPath;\n};\n\n// props: preCheck, args, hRes, limit\nfunction getClHandler(commandHandler, options) {\n  var clHandler = {},\n    hIndex = {};\n  if (typeof commandHandler === 'object') {\n    Object.keys(commandHandler).forEach(function(cmd) {\n      if (typeof commandHandler[cmd] === 'function') {\n        hIndex[options.caseSensitive ? cmd : cmd.toLowerCase()] = commandHandler[cmd];\n      }\n    });\n    clHandler.preCheck = function(res) {\n      var cmdKey;\n      clHandler.args = parseCl(res);\n      cmdKey = clHandler.args[0] || '';\n      if (!options.caseSensitive) { cmdKey = cmdKey.toLowerCase(); }\n      clHandler.hRes =\n        cmdKey !== '_' && hIndex.hasOwnProperty(cmdKey)\n          ? hIndex[cmdKey].apply(res, clHandler.args.slice(1)) :\n          hIndex.hasOwnProperty('_') ? hIndex._.apply(res, clHandler.args) : null;\n      return {res: res, forceNext: false};\n    };\n    if (!hIndex.hasOwnProperty('_')) {\n      clHandler.limit = function() { // It's called after preCheck.\n        var cmdKey = clHandler.args[0] || '';\n        if (!options.caseSensitive) { cmdKey = cmdKey.toLowerCase(); }\n        return hIndex.hasOwnProperty(cmdKey);\n      };\n    }\n  } else {\n    clHandler.preCheck = function(res) {\n      clHandler.args = parseCl(res);\n      clHandler.hRes = typeof commandHandler === 'function'\n        ? commandHandler.apply(res, clHandler.args) : true; // true for break loop\n      return {res: res, forceNext: false};\n    };\n  }\n  return clHandler;\n}\n\nexports.promptCL = function(commandHandler, options) {\n  /* eslint-disable key-spacing */\n  var readOptions = margeOptions({\n      // -------- default\n      hideEchoBack:       false,\n      limitMessage:       'Requested command is not available.',\n      caseSensitive:      false,\n      history:            true\n    }, options),\n    //   -------- forced\n    //   trueValue, falseValue, keepWhitespace don't work.\n    //   preCheck, limit (by clHandler)\n    clHandler = getClHandler(commandHandler, readOptions);\n  /* eslint-enable key-spacing */\n  readOptions.limit = clHandler.limit;\n  readOptions.preCheck = clHandler.preCheck;\n  exports.prompt(readOptions);\n  return clHandler.args;\n};\n\nexports.promptLoop = function(inputHandler, options) {\n  /* eslint-disable key-spacing */\n  var readOptions = margeOptions({\n    // -------- default\n    hideEchoBack:       false,\n    trueValue:          null,\n    falseValue:         null,\n    caseSensitive:      false,\n    history:            true\n  }, options);\n  /* eslint-enable key-spacing */\n  while (true) { if (inputHandler(exports.prompt(readOptions))) { break; } }\n  // return; // nothing is returned\n};\n\nexports.promptCLLoop = function(commandHandler, options) {\n  /* eslint-disable key-spacing */\n  var readOptions = margeOptions({\n      // -------- default\n      hideEchoBack:       false,\n      limitMessage:       'Requested command is not available.',\n      caseSensitive:      false,\n      history:            true\n    }, options),\n    //   -------- forced\n    //   trueValue, falseValue, keepWhitespace don't work.\n    //   preCheck, limit (by clHandler)\n    clHandler = getClHandler(commandHandler, readOptions);\n  /* eslint-enable key-spacing */\n  readOptions.limit = clHandler.limit;\n  readOptions.preCheck = clHandler.preCheck;\n  while (true) {\n    exports.prompt(readOptions);\n    if (clHandler.hRes) { break; }\n  }\n  // return; // nothing is returned\n};\n\nexports.promptSimShell = function(options) {\n  /* eslint-disable key-spacing */\n  return exports.prompt(margeOptions({\n    // -------- default\n    hideEchoBack:       false,\n    history:            true\n  }, options, {\n    // -------- forced\n    prompt:             (function() {\n      return IS_WIN ? '$<cwd>>' :\n        // 'user@host:cwd$ '\n        (process.env.USER || '') +\n        (process.env.HOSTNAME ? '@' + process.env.HOSTNAME.replace(/\\..*$/, '') : '') +\n        ':$<cwdHome>$ ';\n    })()\n  }));\n  /* eslint-enable key-spacing */\n};\n\nfunction _keyInYN(query, options, limit) {\n  var res;\n  if (query == null) { query = 'Are you sure? '; }\n  if ((!options || options.guide !== false) && (query += '')) {\n    query = query.replace(/\\s*:?\\s*$/, '') + ' [y/n]: ';\n  }\n  /* eslint-disable key-spacing */\n  res = exports.keyIn(query, margeOptions(options, {\n    // -------- forced\n    hideEchoBack:       false,\n    limit:              limit,\n    trueValue:          'y',\n    falseValue:         'n',\n    caseSensitive:      false\n    // mask doesn't work.\n  }));\n  // added:     guide\n  /* eslint-enable key-spacing */\n  return typeof res === 'boolean' ? res : '';\n}\nexports.keyInYN = function(query, options) { return _keyInYN(query, options); };\nexports.keyInYNStrict = function(query, options) { return _keyInYN(query, options, 'yn'); };\n\nexports.keyInPause = function(query, options) {\n  if (query == null) { query = 'Continue...'; }\n  if ((!options || options.guide !== false) && (query += '')) {\n    query = query.replace(/\\s+$/, '') + ' (Hit any key)';\n  }\n  /* eslint-disable key-spacing */\n  exports.keyIn(query, margeOptions({\n    // -------- default\n    limit:              null\n  }, options, {\n    // -------- forced\n    hideEchoBack:       true,\n    mask:               ''\n  }));\n  // added:     guide\n  /* eslint-enable key-spacing */\n  // return; // nothing is returned\n};\n\nexports.keyInSelect = function(items, query, options) {\n  /* eslint-disable key-spacing */\n  var readOptions = margeOptions({\n      // -------- default\n      hideEchoBack:       false\n    }, options, {\n      // -------- forced\n      trueValue:          null,\n      falseValue:         null,\n      caseSensitive:      false,\n      // limit (by items),\n      phContent: function(param) {\n        return param === 'itemsCount' ? items.length + '' :\n          param === 'firstItem' ? (items[0] + '').trim() :\n          param === 'lastItem' ? (items[items.length - 1] + '').trim() : null;\n      }\n    }),\n    // added:     guide, cancel\n    keylist = '',\n    key2i = {},\n    charCode = 49 /* '1' */,\n    display = '\\n';\n  /* eslint-enable key-spacing */\n  if (!Array.isArray(items) || !items.length || items.length > 35) {\n    throw '`items` must be Array (max length: 35).';\n  }\n\n  items.forEach(function(item, i) {\n    var key = String.fromCharCode(charCode);\n    keylist += key;\n    key2i[key] = i;\n    display += '[' + key + '] ' + (item + '').trim() + '\\n';\n    charCode = charCode === 57 /* '9' */ ? 97 /* 'a' */ : charCode + 1;\n  });\n  if (!options || options.cancel !== false) {\n    keylist += '0';\n    key2i['0'] = -1;\n    display += '[0] ' +\n      (options && options.cancel != null && typeof options.cancel !== 'boolean'\n        ? (options.cancel + '').trim() : 'CANCEL') + '\\n';\n  }\n  readOptions.limit = keylist;\n  display += '\\n';\n\n  if (query == null) { query = 'Choose one from list: '; }\n  if ((query += '')) {\n    if (!options || options.guide !== false) {\n      query = query.replace(/\\s*:?\\s*$/, '') + ' [$<limit>]: ';\n    }\n    display += query;\n  }\n\n  return key2i[exports.keyIn(display, readOptions).toLowerCase()];\n};\n\nexports.getRawInput = function() { return rawInput; };\n\n// ======== DEPRECATED ========\nfunction _setOption(optionName, args) {\n  var options;\n  if (args.length) { options = {}; options[optionName] = args[0]; }\n  return exports.setDefaultOptions(options)[optionName];\n}\nexports.setPrint = function() { return _setOption('print', arguments); };\nexports.setPrompt = function() { return _setOption('prompt', arguments); };\nexports.setEncoding = function() { return _setOption('encoding', arguments); };\nexports.setMask = function() { return _setOption('mask', arguments); };\nexports.setBufferSize = function() { return _setOption('bufferSize', arguments); };\n"]}